export declare const vertex = "\n    // -- <fog_pars_vertex>\n    // uniform vec3 fogColor;\n    // varying float vFogDepth;\n    // uniform float fogDensity;\n    varying float vFogDepth;\n    \n\n    varying vec2 vUv; \n    varying vec3 vposition;\n    varying vec4 mvPosition;\n\n    void main() {\n    \n    \n    // This is just the local position.\n    vUv = uv; // position;\n    // This is the global position in the world.\n    vposition = (modelMatrix * vec4(position, 1.0)).xyz;\n    \n    vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n    // gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    gl_Position = projectionMatrix * modelViewPosition; \n\n\n    // General THREEJS varying\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0);\n\n    // # --- <fog_vertex>\n    vFogDepth = - mvPosition.z;\n    }\n";
export declare const fragment = "\n    // -- <fog_pars_fragment>\n    uniform vec3 fogColor;\n    varying float vFogDepth;\n    uniform float fogDensity;\n    \n\n    // Scales the effect\n    uniform float u_zoom;\n    // The effect speed\n    uniform float u_speed;\n    // General brightness\n    uniform float u_bright;\n    // Intensity, like the maximal alpha value of the effect\n    uniform float u_intensity;\n    // The current shader animation time frame\n    uniform float u_time;\n    // The underlying texture to use\n    uniform sampler2D u_texture;\n    // The effect color on its peak brightness value\n    uniform vec4 u_effect_color;\n    \n    \n    varying vec2 vUv;\n    varying vec3 vposition;\n    varying vec4 mvPosition;\n    \n    void main()\n    {\n        // uncoment when using real texture\n        vec4 texture_color = texture2D(u_texture, vUv.xy);\n        // vec4 effect_color = vec4(0.19, 0.86, 0.86, 1.0);\n        // vec4 texture_color = vec4(0.19, 0.86, 0.86, 0.0);\n        \n        \n        vec4 k = vec4(u_time)*u_speed;\n        \n        // Use the xz-coordinated to view from top\n        k.xy = vec2(vposition.x, vposition.z) * u_zoom;\n        vec3 factors = vec3(1.0,1.0,1.0);\n        \n        float val1 = length(0.5-fract(k.xyw*=mat3(vec3(-2.0,-1.0,0.0), vec3(3.0,-1.0,1.0), vec3(1.0,-1.0,-1.0))*factors.x*0.5));\n        float val2 = length(0.5-fract(k.xyw*=mat3(vec3(-2.0,-1.0,0.0), vec3(3.0,-1.0,1.0), vec3(1.0,-1.0,-1.0))*factors.y*0.2));\n        float val3 = length(0.5-fract(k.xyw*=mat3(vec3(-2.0,-1.0,0.0), vec3(3.0,-1.0,1.0), vec3(1.0,-1.0,-1.0))*factors.z*0.5));\n        \n        gl_FragColor = vec4 (pow(min(min(val1,val2),val3), 8.0) * u_bright)+texture_color;\n        float brightValue = pow(min(min(val1,val2),val3), 8.0) * u_bright;\n        \n        gl_FragColor = texture_color + (u_effect_color-texture_color) * min(u_intensity,brightValue);\n        // // gl_FragColor = texture_color + (u_effect_color-texture_color) * min(u_intensity,brightValue);\n        // gl_FragColor.rgb = gl_FragColor.xyz;\n\n        // -- <fog_fragment>\n        float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n        gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n        // // Dither\n        // gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n    }\n";
